<!DOCTYPE html>
<!-- To interface with SuperMemo you must preserve these properties and fields when editing yt.htm:
    - the order of INPUT fields (these are used by SuperMemo to collect extract boundaries)
    - SELECT and OPTION fields for generating extracts
    - INPUT field with YouTube video ID substituted by SuperMemo (id="videoid")
    - INPUT field that determines the position of video start and end (id="startvideoat" and id="stopvideoat")(must be "0:00:00")
    see: https://help.supermemo.org/wiki/Incremental_video#Your_own_incremental_video_script
    Symptoms of failure to do this: extract start nd stop times are rotated incorrctly (start becomes stop)
-->
<html><head>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">
        <meta content="IE=11.0000" http-equiv="X-UA-Compatible">
        <style type="text/css">
            body, div, h4, p, input, select {
                margin: 0;
                padding: 0;
            }

            img {
                margin: 0 2px;
            }

            #ga {
                display: none;
            }

            #feedbackOuter {
                margin: 5px;
                display: none;
                width: 415px;
                text-align: center;
            }

            .img-yellow-message-top-cap, .img-yellow-message-bottom-cap {
                height: 4px;
                font-size: 0;
            }

            .img-yellow-message-top-cap {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat 0 -32px;
            }

            .left-right-border-yellow {
                border-left: 1px solid #F5E082;
                border-right: 1px solid #F5E082;
                background-color: #FFFFE5;
            }

            .img-yellow-message-bottom-cap {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat 0 -36px;
            }

            #feedbackInner {
                padding: 5px;
                text-align: left;
            }

            h4 {
                padding-left: 17px;
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -401px 1px;
            }

            .bd {
                margin: 5px 0;
            }

            .ft {
                text-align: center;
            }

            .email {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat 0 0;
            }

            fieldset {
                padding: 5px;
                border: none;
                display: block;
                width: 750px;
            }

            p {
                margin: 0;
                padding: 0;
            }

            .ctrlGrp {
                border-top: 1px solid #808080;
                clear: both;
            }

            .ctrlSubgrp {
                padding: 5px;
                border-left: 1px solid #808080;
                float: left;
            }

            .firstCtrlGrp, .firstCtrlSubgrp {
                border: none;
            }

            .debug {
                font-size: xx-small;
            }

            .repeat {
                float: left;
                height: 3.6em;
            }

            button, input {
                width: 5em;
            }

            .checkbox {
                width: auto;
            }

            select, #extractName {
                width: 15em;
            }

            a span {
                height: 16px;
                width: 16px;
                font-size: 0;
            }

            .ctrlGrp label {
                display: block;
                width: auto;
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -254px 0;
            }

            .imgBtn {
                border: 0;
                width: 16px;
                vertical-align: text-top;
            }

            .rewind {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -16px 0;
            }

            .forward {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -32px 0;
            }

            .goTo {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -48px 0;
            }

            .restoreStartAt {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -64px 0;
            }

            .restoreStopAt {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -80px 0;
            }

            .removeCurrentExtract {
                background: transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -96px 0;
            }
			
        </style>
        <link href="http://localhost:8000/scripts/container.css" type="text/css" rel="stylesheet" />
    </head>
    <body class="yui-skin-sam">
        <div id="customPrompt">
            <div class="hd">Save As</div>
            <div class="bd">
                <form name="promptForm" id="promptForm">
                    <label for="extractName">Extract name: </label>
                    <input type="text" name="extractName" id="extractName" onfocus="this.select();" onblur="oCustomPrompt.focusFirstButton();" />
                </form>
            </div>
        </div>
        <div id="feedbackOuter">
            <div class="img-yellow-message-top-cap"></div>
            <div class="left-right-border-yellow">
                <div id="feedbackInner"></div>
            </div>
            <div class="img-yellow-message-bottom-cap"></div>
        </div>
        <div class="videoWrapper">
			<div id="bideo"></div>
		</div>
        <input type="hidden" value="zzzYT-IDzzz" id="videoid" />
        <input type="hidden" value="1" id="imposeboundries" />
        <fieldset>
            <div class="ctrlGrp firstCtrlGrp">
                <div class="ctrlSubgrp firstCtrlSubgrp">
                    <p>
                        <button type="button" id="mark" onclick="setAt('resume');">Mark</button>
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="" id="rewindResume" class="imgBtn rewind" onclick="move('resume', 'rewind');" />
						<input type="text" value="0:00:00" id="resumevideoat" onfocus="this.select();" ondblclick="resetAt('resume');" onchange="this.value = convertDuration2HHMMSS(convertHHMMSS2Duration(this.value));" />
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="" id="forwardResume" class="imgBtn forward" onclick="move('resume', 'forward');" />
						<img src="http://localhost:8000/iv/images/transparent.png" alt="Restore default" title="Restore default" id="restoreResumeAt" class="imgBtn restoreStartAt" onclick="resetAt('resume');" />
                        <button type="button" id="resume" onclick="resumeVideo();">Resume</button>
                    </p>
                </div>
            </div>
            <div class="ctrlGrp">
                <div class="ctrlSubgrp firstCtrlSubgrp">
                    <p>
                        <button type="button" id="start" onclick="setAt('start');">Start</button>
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="" id="rewindStart" class="imgBtn rewind" onclick="move('start', 'rewind');" />
                        <input type="text" value="0:00:00" id="startvideoat" onfocus="this.select();" onchange="this.value = convertDuration2HHMMSS(convertHHMMSS2Duration(this.value)); document.getElementById('imposeboundries').value = 0; updateBorder(this);" ondblclick="resetAt('start');" />
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="" id="forwardStart" class="imgBtn forward" onclick="move('start', 'forward');" />
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="Go to" title="Go to" id="goToStart" class="imgBtn goTo" onclick="goTo('start');" />
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="Restore default" title="Restore default" id="restoreStartAt" class="imgBtn restoreStartAt" onclick="resetAt('start');" />
                    </p>
                    <p>
                        <button type="button" id="stop" onclick="setAt('stop');">Stop</button>
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="" id="rewindStop" class="imgBtn rewind" onclick="move('stop', 'rewind');" />
                        <input type="text" value="0:00:00" id="stopvideoat" onfocus="this.select();" onchange="this.value = convertDuration2HHMMSS(convertHHMMSS2Duration(this.value)); document.getElementById('imposeboundries').value = 0; updateBorder(this);" ondblclick="resetAt('stop');" />
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="" id="forwardStop" class="imgBtn forward" onclick="move('stop', 'forward');" />
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="Go to" title="Go to" id="goToStop" class="imgBtn goTo" onclick="goTo('stop');" />
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="Restore default" title="Restore default" id="restoreStopAt" class="imgBtn restoreStopAt" onclick="resetAt('stop');" />
                    </p>
                </div>
                <div class="ctrlSubgrp repeat">
                    <p>
                        <input type="checkbox" checked="checked" id="repeat" class="checkbox" />
                        <label for="repeat" title="Repeat (R)">&nbsp;</label>
                    </p>
                </div>
                <div class="ctrlSubgrp">
                    <p>
                        <button type="button" id="test" onclick="testExtract();">Test</button>
                    </p>
                    <p>
                        <button type="button" id="reset" onclick="resetExtract();">Reset</button>
                    </p>
                </div>
            </div>
            <div class="ctrlGrp">
                <div class="ctrlSubgrp firstCtrlSubgrp">
                    <p>
                        <button type="button" id="extract" onclick="addExtract();">Extract</button>
                        <select id="extracts" onchange="feedCurrentExtract();" onclick="feedCurrentExtract();"></select>
                        <img src="http://localhost:8000/iv/images/transparent.png" alt="Remove the currently selected extract" id="removeCurrentExtract" class="imgBtn removeCurrentExtract" onclick="removeCurrentExtract();" />
                        <input type="hidden" value="0" id="customPromptVisible" />
                        <button type="button" id="reopen" onclick="reopenChWnd();">Reopen</button>
                        <button type="button" id="closeBtn" onclick="cleanupWindow();">Close</button>
                    </p>
                </div>
            </div>
			<div class="ctrlGrp">
                <textarea id="log" style="width: 100%"></textarea>
			</div>
            <div class="ctrlGrp">
                <div class="ctrlSubgrp firstCtrlSubgrp debug">Date: Nov 29, 2017</div>
            </div>
        </fieldset>
        <div id="speedSlider" style="z-index:2;">
        <form>
        <div>
            <input 
            type="range" 
            min=-10
            max=10
            value=0
            id="fader"
            step=1
            onchange="outputUpdate(value)"
            >
            <span for=fader id=speed>1</span>
        </div>
        </form>
        </div>

        <!-- YAHOO -->
        <script type="text/javascript" src="http://localhost:8000/scripts/container-min.js" defer onload="setTimeout(loadBindings,0)"></script>
       
        <!-- <script src="http://localhost:8000/scripts/polyfill.min.js"></script> -->

        <!-- <script type="text/javascript" src='http://localhost:8000/scripts/ReactPlayer.standalone.js' async onload="setTimeout(loadPlayer,0)"></script> -->
        <script>
            // define a new console
            var console=(function(oldCons){
                var oLog = document.getElementById("log");
                return {
                    log: function(text){
                        //oldCons.log(text);
                        oLog.innerHTML += '[LOG] ' + text + '\n';                    
                    },
                    info: function (text) {
                        //oldCons.info(text);
                        // Your code
                        oLog.innerHTML += '[INFO] ' + text + '\n';                    
                    },
                    warn: function (text) {
                        //oldCons.warn(text);
                        // Your code
                        oLog.innerHTML += '[WARN] ' + text + '\n';
                        //alert( '[WARN] ' + text + '\n')                
                    },
                    error: function (text) {
                        //oldCons.error(text);
                        // Your code
                        oLog.innerHTML += '[ERROR] ' + text + '\n';                    
                    }
                };
            }(window.console));

            //Then redefine the old console
            window.console = console;

            unified_embed = 'location=no,status=no,titlebar=no,left=0,toolbar=no,top=250,width=700,height=400'
            sep_embed = 'location=no,status=no,titlebar=no,left=0,toolbar=no,top=70,width=800,height=600'

            ch_wdw = window.open(document.location.toString().replace('yt_header','yt'), '_blank', sep_embed)

            window.onerror = function myErrorHandler(errorMsg, url, lineNumber) {
                // Log the error here -- perhaps using an AJAX call
                console.error(errorMsg);
                return true;
            }

            //TODO state loading
            state = {
                url: null,
                pip: false,
                playing: true,
                controls: false,
                light: false,
                volume: 0.8,
                muted: false,
                played: 0,
                loaded: 0,
                duration: 0,
                playbackRate: 1.0,
                loop: false
            }

            function setAt(type, parent) {
                var oAt,
                    iCurrTime = 0,
                    iDuration = 0;

                if (ytplayer) {
                    iCurrTime = parseInt(ytplayer.getCurrentTime());
                    iDuration = parseInt(ytplayer.getDuration());
                    oAt = document.getElementById(type + "videoat");
                    
                    oAt.value = convertDuration2HHMMSS(iCurrTime);
                    if (type != "resume") {
                        document.getElementById("imposeboundries").value = 0;
                        updateBorder(oAt);
                    }
                }
            }

            function syncElement(ctx, id, value) {
                ctx.document.getElementById(id).value = value
            }

            function syncBorder(ctx, id, value) {
                ctx.document.getElementById(id).style.border = value;
            }

            function syncInnerHTML(ctx, id, value) {
                ctx.document.getElementById(id).innerHTML = value;
            }
            

            function syncExtractsAdd(ctx, id, sExtractName, sExtractVal) {
                oExtracts = ctx.document.getElementById(id);
                oNewOpt = new Option(sExtractName, sExtractVal);
                oExtracts.options[oExtracts.options.length] = oNewOpt;
                oExtracts.selectedIndex = oExtracts.options.length - 1;
                oExtracts.disabled = false;
                ctx.document.getElementById("removeCurrentExtract").style.background = "transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -112px 0";
            }

            // emulate behavior between windows as much as possible
            function syncExtractsRemove(ctx, id) {
                oExtracts = ctx.document.getElementById(id);
                oCurrentExtract = oExtracts.options[oExtracts.selectedIndex];

                oExtracts.options[oExtracts.selectedIndex] = null;
                if (oExtracts.options.length) {
                    oExtracts.selectedIndex = oExtracts.options.length - 1;
                } else {
                    oExtracts.disabled = true;
                    document.getElementById("removeCurrentExtract").style.background = "transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -96px 0";
                }
            }

            function syncExtractsSelect(ctx, id, selectedIndex) {
                oSelect = ctx.document.getElementById(id);
                oSelect.selectedIndex = selectedIndex;
            }

            //sets the *videat to either 0 or current play time
            function resetAt(type) {
                var oAt = document.getElementById(type + "videoat"),
                    iAt;
                //console.warn("setting " + type + "videoat, cur: " + oAt.value) 
                switch (type) {
                    case "resume":
                    case "start":
                        //console.warn("   to zero.")
                        iAt = 0;
                        break;

                    case "stop":
                        if (ytplayer) {
                            //console.warn( "    to the duration: " + ytplayer.getDuration())
                            iAt = parseInt(ytplayer.getDuration());
                        }
                        break;
                }

                oAt.value = convertDuration2HHMMSS(iAt);
                oAt.style.border = "2px inset";
            }

            //cosmetic
            function updateBorder(inputText) {
                var sBorderCl = "",
                    iNewVal = convertHHMMSS2Duration(inputText.value);

                switch (inputText.id.replace(/videoat/, "")) {
                    case "start":
                        if (iNewVal > 0) {
                            sBorderCl = "blue";
                        }
                        break;

                    case "stop":
                        // TODO use of internal player discouraged
                        if (ytplayer.getInternalPlayer()) {
                            if (ytplayer.getInternalPlayer().getPlayerState() >= 1) {
                                if (iNewVal < parseInt(ytplayer.getDuration())) {
                                    sBorderCl = "blue";
                                }
                            }
                        }
                        break;
                }

                if (sBorderCl.length) {
                    inputText.style.border = "2px solid " + sBorderCl;
                } else {
                    inputText.style.border = "2px inset";
                }
            }

            function resetExtract() {
                if (ytplayer) {
                    document.getElementById("imposeboundries").value = 0;
                    resetAt("start");
                    resetAt("stop");
                }
            }

            function addExtract() {
                var oCustomPromptVisible = document.getElementById("customPromptVisible"),
					oExtracts = document.getElementById("extracts"),
                    iNextExtractNo = (!oExtracts.options.length) ? 1 : oExtracts.options.length + 1,
                    sExtractName = "Extract #" + iNextExtractNo;

				oCustomPromptVisible.value = 1;

				if (oCustomPromptVisible.value == 1) {
	                document.getElementById("extractName").value = sExtractName;

					oCustomPrompt.show();

	                oRKeyListener.disable();
                    oFKeyListener.disable();
				}
            }

            function feedCurrentExtract(e) {
                var oEvent = YAHOO.util.Event.getEvent(e),
                    oSelect = document.getElementById("extracts"),
                    sCurrentExtract = "",
                    aCurrentExtract = [],
                    oStartAt = document.getElementById("startvideoat"),
                    oStopAt = document.getElementById("stopvideoat");

                if ((oSelect.options.length > 1) && (oEvent.type == "click")) {
                    YAHOO.util.Event.stopEvent(oEvent);
                    return;
                }

                sCurrentExtract = oSelect.options[oSelect.selectedIndex].value;
                aCurrentExtract = sCurrentExtract.split(" - ");
                //console.log("e Overwriting start " + oStartAt.value + "->" + aCurrentExtract[0])
                oStartAt.value = aCurrentExtract[0];
                updateBorder(oStartAt);
                oStopAt.value = aCurrentExtract[1];
                //console.log("e Overwriting stop " + oStopAt.value + "->" + aCurrentExtract[1])
                updateBorder(oStopAt);
                if (ytplayer) {
                    playPlayer();
                }
                seekVideo("start");
                document.getElementById("imposeboundries").value = 1;
                oSelect.blur();
            }

            function removeCurrentExtract() {
                var oExtracts = document.getElementById("extracts"),
                    oCurrentExtract = oExtracts.options[oExtracts.selectedIndex];

                oExtracts.options[oExtracts.selectedIndex] = null;
                if (oExtracts.options.length) {
                    oExtracts.selectedIndex = oExtracts.options.length - 1;
                } else {
                    oExtracts.disabled = true;
                    document.getElementById("removeCurrentExtract").style.background = "transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -96px 0";
                }
            }

            function move(type, where) {
                var oAt = document.getElementById(type + "videoat"),
                    iOldVal = convertHHMMSS2Duration(oAt.value),
                    iNewVal = 0,
                    iMaxVal = 0;

                if (ytplayer) {
                    iMaxVal = parseInt(ytplayer.getDuration());
                }

                switch (where) {
                    case "rewind":
                        iNewVal = iOldVal - iSecs;
                        if (iNewVal <= 0) {
                            iNewVal = 0;
                        }
                        if (iNewVal > iMaxVal) {
                            iNewVal = iMaxVal;
                        }
                        break;

                    case "forward":
                        iNewVal = iOldVal + iSecs;
                        if (iNewVal >= iMaxVal) {
                            iNewVal = iMaxVal;
                        }
                        if (iNewVal < 0) {
                            iNewVal = 0;
                        }
                        break;
                }

                oAt.value = convertDuration2HHMMSS(iNewVal);
            }

            function convertDuration2HHMMSS(seconds) {
                var iDuration = parseInt(seconds),
                iTotalMinutes = Math.floor(iDuration / 60),
                iHours = Math.floor(iTotalMinutes / 60),
                iMinutes = iTotalMinutes % 60,
                iSeconds = iDuration % 60;
                
                if (iHours > 0) {
                    //console.log("converting " + seconds + ' to ' +  iHours + ":" + padZero(iMinutes) + ":" + padZero(iSeconds));
                    return iHours + ":" + padZero(iMinutes) + ":" + padZero(iSeconds);
                } else {
                    //console.log("converting " + seconds + ' to ' + iMinutes + ':' + padZero(iSeconds));
                    return iMinutes + ':' + padZero(iSeconds);
                }
            }

            function padZero(number) {
                if (number < 10) {
                    return "0" + number;
                } else {
                    return number;
                }
            }

            function convertHHMMSS2Duration(time) {
                var iTotalSeconds = 0,
                    aTime = time.split(":");

                switch (aTime.length) {
                    case 3:
                        iTotalSeconds += aTime[0] * 60 * 60;
                        iTotalSeconds += aTime[1] * 60;
                        iTotalSeconds += aTime[2] * 1;
                        break;

                    case 2:
                        iTotalSeconds += aTime[0] * 60;
                        iTotalSeconds += aTime[1] * 1;
                        break;

                    default:
                        iTotalSeconds += aTime[0] * 1;
                        break;
                }

                //console.log("converting " + time + ' to ' + iTotalSeconds);
                return iTotalSeconds;
            }

            function ucfirst( str ) {
                // http://kevin.vanzonneveld.net
                // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                // +   bugfixed by: Onno Marsman
                // +   improved by: Brett Zamir
                // *     example 1: ucfirst('kevin van zonneveld');
                // *     returns 1: 'Kevin van zonneveld'

                str += '';
                var f = str.charAt(0).toUpperCase();
                return f + str.substr(1);
            }

            var parseUrlQuery = function(urlQuery) {
                var aUrlQuery,
                    aUrlParam,
                    oUrlQuery = {};
                
                urlQuery = urlQuery.substring(1);
                
                aUrlQuery = urlQuery.split("&");
                
                for (var i = 0, j = aUrlQuery.length; i < j; i++) {
                    aUrlParam = aUrlQuery[i].split("=");
                    oUrlQuery[aUrlParam[0]] = aUrlParam[1];
                }
                
                return oUrlQuery;
            },
            oUrlQuery = parseUrlQuery(document.location.search),
            iSecs = 1,
            url,
            container,
            ytplayer,
            playerElem,
            oCustomPrompt,
            oRKeyListener,
            oFKeyListener;
            //console.log('?' + (sUrlString.replace("yt.htm","")));
            //console.log(document.location.search);

            function outputUpdate(val) {
                sp = 1+(0.1*val);
                document.getElementById('speed').innerHTML= sp;
                if(ytplayer.getInternalPlayer()){
                    ytplayer.getInternalPlayer().setPlaybackRate(sp);
                }
            }

            function loadBindings(){
                var fOK = function (e) {
	                var oNewOpt,
	                    sExtractName = this.getData().extractName,
	                    oStartAt = document.getElementById("startvideoat"),
	                    oStopAt = document.getElementById("stopvideoat"),
	                    sExtractVal = oStartAt.value + " - " + oStopAt.value,
	                    oExtracts = document.getElementById("extracts"),
	                    oResumeAt = document.getElementById("resumevideoat"),
						oCustomPromptVisible = document.getElementById("customPromptVisible");
                    //console.log('' + sExtractName);

                    // (1) updates [extracts] menu with a new extract
                    oNewOpt = new Option(sExtractName, sExtractVal);
                    oExtracts.options[oExtracts.options.length] = oNewOpt;
                    oExtracts.selectedIndex = oExtracts.options.length - 1;
                    oExtracts.disabled = false;
                    document.getElementById("removeCurrentExtract").style.background = "transparent url(http://localhost:8000/iv/images/icons.png) no-repeat -112px 0";
                    // (2) sets [resumevideoat] text input to [stopvideoat]
                    // oResumeAt.value = oStopAt.value;
                    // (3) sets [startvideoat] text input to EXPERIMENTAL Stop - 1 sec.
                    oStartAt.value = convertDuration2HHMMSS(convertHHMMSS2Duration(oStopAt.value) - 1);
                    // (4) resets [stopvideoat] text input
                    resetAt("stop");

                    oCustomPromptVisible.value = 0;

					if (oCustomPromptVisible.value == 0) {
						this.hide();

	                    oRKeyListener.enable();
	                    oFKeyListener.enable();
					}
                },
                fCancel = function () {
					var oCustomPromptVisible = document.getElementById("customPromptVisible");

					oCustomPromptVisible.value = 0;

					if (oCustomPromptVisible.value == 0) {
						this.cancel();

	                    oRKeyListener.enable();
                        oFKeyListener.enable();
					}
                },
                oCustomPromptCfg = {
                    visible: false,
                    constraintoviewport: true,
                    context: ["extracts", "bl", "tl"],
                    width: "auto",
                    dragOnly: true,
                    modal: true,
                    buttons: [
                        {
                            text: "OK",
                            handler: fOK,
                            isDefault: true
                        },
                        {
                            text: "Cancel",
                            handler: fCancel
                        }
                    ],
                    postmethod: "none"
                },
                oESCKeyListener = new YAHOO.util.KeyListener(
                    document,
                    {
                        keys: YAHOO.util.KeyListener.KEY.ESCAPE
                    },
                    {
                        fn: fCancel,
                        scope: oCustomPrompt,
                        correctScope: true
                    }
                ),
                fTurnRepeatOnOff = function () {
                    var oRepeat = document.getElementById("repeat");

                    if (oRepeat.checked) {
                        oRepeat.checked = false;
                    } else {
                        oRepeat.checked = true;
                    }
                },
                fTurnFullscreenOn = function () { // TODO f to exit fullscreen
                    if(ytplayer){
                        //var video = document.getElementById("movie_player");
                        var video = document.querySelector('video')
                        if (video.msRequestFullscreen) {
                            video.msRequestFullscreen();
                            //console.log("FS API")
                        } 
                    }
                };

                oRKeyListener = new YAHOO.util.KeyListener(
                    document,
                    {
                        keys: 82
                    },
                    fTurnRepeatOnOff
                )
                oFKeyListener = new YAHOO.util.KeyListener(
                    document,
                    {
                        keys: 70
                    },
                    fTurnFullscreenOn
                )

                oCustomPrompt = new YAHOO.widget.Dialog(
                    "customPrompt",
                    oCustomPromptCfg
                )
                
                oCustomPrompt.cfg.queueProperty("keylisteners", oESCKeyListener);
                oCustomPrompt.render();
                
                oRKeyListener.enable();
                oFKeyListener.enable();

                var aSelects = document.getElementsByTagName("select");

                for (i = 0, j = aSelects.length; i < j; i++) {
                    if (!aSelects[i].options.length) {
                        aSelects[i].disabled = true;
                    }
                }
            }
        
        function loadPlayer(){
            console.log("player loaded")
            document.getElementById("videoid").value = oUrlQuery.videoid;
            document.getElementById("resumevideoat").value = oUrlQuery.resume;
            document.getElementById("startvideoat").value = oUrlQuery.start;
            document.getElementById("stopvideoat").value = oUrlQuery.stop;
        }

        function reopenChWnd(){
            if((!ch_wdw) || ch_wdw && ch_wdw.closed){
                ch_wdw = window.open(document.location.toString().replace('yt_header','yt'), '_blank', sep_embed)
            }
            if(ch_wdw)
                ch_wdw.focus();
        }

        loadPlayer();

        function cleanupWindow(){
            if(ch_wdw && !ch_wdw.closed)
                ch_wdw.close();
        }

        if (typeof window.onunload != 'undefined'){
            window.onunload = cleanupWindow;
        }

        </script>
    </body>
</html>